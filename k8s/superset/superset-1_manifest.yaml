---
# Source: superset/templates/superset-secret.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: superset-1-serviceaccount
  labels:
    app.kubernetes.io/name: superset-1
    app.kubernetes.io/component: postgresql-server
---
# Source: superset/templates/postgresql-tls.yaml
apiVersion: v1
kind: Secret
metadata:
  name: superset-1-tls
  labels:
    app.kubernetes.io/name: superset-1
    app.kubernetes.io/component: postgresql-server
data:
  secret.key: |
   LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRRGpaSVpCV0NzRzd2QkYKb1JSUFM0VERRUTJMVzd1NVJaUGthb0EvWEwxTm1reTBURnJ0M2x1MURHQXlxcnYrSDF5cDFBRHZNTktiR2NYUQpuUDEzUmFLYllyR05XMXNyQWoySjlLazliYzhzS3o1N2xyRldreTVranU0bWNyUEt3RHRjdWlzOTQ1WEN4cmtCCjNhM2tvTERjTXJqVVB0R0Ftc0Z1S3NOM1N4cVNDZDh0VENvcExvWkNmcWRZM0ZTdWJHb0h5RE1HWnJ2RkFkdlgKbWZPREd0eGlNaWI1Q2grT1hvVTdhK1llTXVxTC9QSWZiLzQwU1FUQ2JxUEtzWnA4UVd2aEYrdlRzckZTZWF4Ygp1Wmc2WTBZZEczQjlEUjFUUGZMRWpmRnlISUVKdHZxOFpPYjY1T2syOTNFVTM2MUNZK1ZZZkFpY0FPeWRUUmoxCnRKR3JVZUVCQWdNQkFBRUNnZ0VBVFVDa24rU05VYUN4Zm1aWUdReG1BVlBEZnpuZUQvYUVaUkNObTNrdFV3VDkKMUM4d29TbHU3SlpVeEVIZTlsbS9TRzhmRmlQM0dQeHJpUkVjeDMyZjNieHM1OEpHdWRqY0FWZGVlK0VuaGpEMgozRlA0MFpuVkpCS3U4OTc2R0FLdzZETFRhQVkrcGRxUGxnT3pCVDVXZDZpL3hGUEhKekxzVGpvM0IvczYvcXU1Cjc3TTZIRnFkcjZ5VnBPckJicGdqSWFzbzUzNjNDTTFaOERKQnhtNjV3azZDRUN4ZDUvRUxJK2cyQ1haRmdoVWkKQmc3S0hrdEhnNjI3RlpQdkJDUEhjQ3NLTmFIa1ljQ01qU1dSbVVzU2E2WWEyMDFSWnlQNFYyWjlGUk9sdGNQSQpkazZ5VUV0NVBleFpNakFNLzI5RWJnT014dVZaOVEvM0REcG4zYnV0dFFLQmdRRDE2UTYvbkE1cStXTU1QQVl4ClJMWkJJYUtiM2lRaUlJSFlrN3dpTDhvWStGdDFPMDd0S3I0MVhlLytXTU5zYktjc3YwTzJqUFdVMFB5cVNZOEMKejBScjFsOFRxakxsNDNKZ3hVbDdYeE9ERVJxdjUwMkhlMG5qMm42dW02T2hkUGhyNWdtN2IweUV6UTVWdENuYQoyMitHOUxsL0Z2bmsydFhIVzN1czErTjJTd0tCZ1FEc3VQYmhCTU9NWFI5Y3IxbGsydEl1NXpPSDRXMGFDSWJ0CkM0QnVyV1ZBRlowYjFlcjFRMUZhN1R0bktPeEtkVnJPUzd0ZWF4NVhveHVBZkYvekkvS1RrbFY1dU84VkZPWEQKbFRmQXkzdVlWZVRJbmdaYnE2dTRPa1ZMcG0vclFoU2Q2K2E4VGJSb0IrNHkrZ3IrOWxwWVIvVlRYdjIxRFB3UwpaWHpoTU9RbVl3S0JnRXdWaUxlbUhCdmkvMDlJdncyOVdicDdJcW1oS0lMYWxmSWhlNE1FVUQ0N2tXaUxLaGRkCk15NmwydHhTTUZ5Nm5Wck43ckJybW93cHdSTWE0VUdZU1c0b0RKQzBCejF6aXU3Lys0Vk5YR2NnQXFiTUpRTzMKRkp5SC9Nd2ZZWmhSN1k3TXhOUVdVcEdBTkdBMTl3RTlCWnUyMmpIRk5Sb216eC80WVNLUVJWTlRBb0dCQUo1MApBTzBHSDA3cFZvRFg3dUtQaG5sVzBTdDNQV3hib05VekNia0wzK1pSa1dSOGdGWER4Y1V6WHJ2aXJLZjZmZG53CjMyNklEVHRrTnBoK3FFczhHTGVuRUFmMlBqTENWam5ndS8wVk41bjBoTHUwNjFTWlNNeDhWTDRhbm5lL044V3QKamprbFdrajRaZjFCV2ZMb08va3owWWNJNHBJNkt0QzFsaTIyYUVFNUFvR0FPOExwekg0SXlHTlVtcXU5UUJUTApjQ09za0JOLzNuMTRmWGsxbE1JdzlRNUZSdlpnMEQ3SUY1a1BkMUZyUEdueFZsQ1UzNDhjek5mK3hqd1JzMXprCmxEdjNGYVpRRmdnSEdlWmlNWnJWNXNSUWtsRWJkNWxrUGY0emgyTklxSHN1MS9WT2VHcWdGNktpVUNVUjFJNTgKTjFjSXpHdW83Rm9UU3lMZEsrK3VaaE09Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
  secret.crt: |
   LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURDekNDQWZNQ0NBWXhiNHBYNk1OVU1BMEdDU3FHU0liM0RRRUJDd1VBTUVneEpqQWtCZ05WQkFzTUhVZEQKVUNCTllYSnJaWFJ3YkdGalpTQkxPSE1nUVhCd0lGUnZiMnh6TVI0d0hBWURWUVFEREJWVVpXMXdiM0poY25rZwpRMlZ5ZEdsbWFXTmhkR1V3SGhjTk1qSXdOakUxTVRVeE9UQTJXaGNOTWpNd05qRTFNVFV4T1RBMldqQklNU1l3CkpBWURWUVFMREIxSFExQWdUV0Z5YTJWMGNHeGhZMlVnU3poeklFRndjQ0JVYjI5c2N6RWVNQndHQTFVRUF3d1YKVkdWdGNHOXlZWEo1SUVObGNuUnBabWxqWVhSbE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQgpDZ0tDQVFFQTQyU0dRVmdyQnU3d1JhRVVUMHVFdzBFTmkxdTd1VVdUNUdxQVAxeTlUWnBNdEV4YTdkNWJ0UXhnCk1xcTcvaDljcWRRQTd6RFNteG5GMEp6OWQwV2ltMkt4alZ0Ykt3STlpZlNwUFczUExDcytlNWF4VnBNdVpJN3UKSm5LenlzQTdYTG9yUGVPVndzYTVBZDJ0NUtDdzNESzQxRDdSZ0pyQmJpckRkMHNha2duZkxVd3FLUzZHUW42bgpXTnhVcm14cUI4Z3pCbWE3eFFIYjE1bnpneHJjWWpJbStRb2ZqbDZGTzJ2bUhqTHFpL3p5SDIvK05Fa0V3bTZqCnlyR2FmRUZyNFJmcjA3S3hVbm1zVzdtWU9tTkdIUnR3ZlEwZFV6M3l4STN4Y2h5QkNiYjZ2R1RtK3VUcE52ZHgKRk4rdFFtUGxXSHdJbkFEc25VMFk5YlNScTFIaEFRSURBUUFCTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFDcgpIREc5QUFRMEFJWWh4UHMrTUprZ1JRR0sramxEVmVCdzBkTnlYYkpRZEY2MVFicXNSN2xWV2FKeXFSdnNZZnhqClUvZFVxeFo4QXh3cjNQZ2crYU5vVlowTHZldk1KQzJ0QnJkNEZldHI3bmV1SVdLdUZUNjAvUXdvdVhiY3kvbzMKTWg0N2VDU1VpeGpwdEJEd0Z5d3JwT1p2MDZiNWdYV3pKWE5wZHVFRHpJNFp0RDZVcnkzTFVsbytabXB4NWpUbgoySWdqQXJQdjM3cE5jKzdmcEZ3QzJ3SEJqYThLdmtYakgzcWpGUit6Nm16N1dMMnBXUHFmRnRERzl0VVp4U3ZTCmgxWkdKcGhFUzl5dnczVTc0cVZMcTRsdmlYK1lsZHVyS25KRkdMTTloSU9VQkh0dTZlOHdSY25iT0ZlOGtKRXUKUUluaHFwbGFLTWlpb041YzFudkQKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
# Source: superset/templates/redis-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: superset-1-redis-secret
  labels:
    app.kubernetes.io/name: "superset-1"
    app.kubernetes.io/component: superset-redis
type: Opaque
data:
  password: "cmVkaXNfcGFzc3dvcmQ="
---
# Source: superset/templates/superset-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: superset-1-superset-secret
  labels:
    app.kubernetes.io/name: superset-1
    app.kubernetes.io/component: apache-superset
type: Opaque
data:
  superset-password: ""
---
# Source: superset/templates/superset-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: superset-1-postgresql-secret
  labels:
    app.kubernetes.io/component: superset-1
    app.kubernetes.io/name: superset-1
type: Opaque
data:
  password: "TkhCbGREUXZjbXRDTTFkbw=="
---
# Source: superset/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: superset-configmap
  namespace: default
  labels:
    app.kubernetes.io/name: superset-1
    app.kubernetes.io/component: superset
data:
  superset_config.py: |-
    # Superset specific config
    ROW_LIMIT = 5000

    SUPERSET_WEBSERVER_PORT = 8088

    # Flask App Builder configuration
    # Your App secret key will be used for securely signing the session cookie
    # and encrypting sensitive information on the database
    # Make sure you are changing this key for your deployment with a strong key.
    # You can generate a strong key using `openssl rand -base64 42`

    SECRET_KEY = 'NHBldDQvcmtCM1do'

    # The SQLAlchemy connection string to your database backend
    # This connection defines the path to the database that stores your
    # superset metadata (slices, connections, tables, dashboards, ...).
    # Note that the connection information to connect to the datasources
    # you want to explore are managed directly in the web UI
    SQLALCHEMY_DATABASE_URI = 'postgresql://superset:NHBldDQvcmtCM1do@superset-1-postgresql-service:5432/superset'

    # Flask-WTF flag for CSRF
    WTF_CSRF_ENABLED = True
    # Add endpoints that need to be exempt from CSRF protection
    WTF_CSRF_EXEMPT_LIST = []
    # A CSRF token that expires in 1 year
    WTF_CSRF_TIME_LIMIT = 60 * 60 * 24 * 365

    # Set this API key to enable Mapbox visualizations
    MAPBOX_API_KEY = ''

    CACHE_CONFIG = {
    'CACHE_TYPE': 'RedisCache',
    'CACHE_DEFAULT_TIMEOUT': 86400,
    'CACHE_KEY_PREFIX': 'superset_',
    'CACHE_REDIS_HOST': 'superset-1-redis-svc',
    'CACHE_REDIS_URL': 'redis://superset-1-redis-svc:6379/1'
    }   

    FILTER_STATE_CACHE_CONFIG = {
    'CACHE_TYPE': 'RedisCache',
    'CACHE_DEFAULT_TIMEOUT': 86400,
    'CACHE_KEY_PREFIX': 'superset_filter_',
    'CACHE_REDIS_URL': 'redis://superset-1-redis-svc:6379/2'
    }

    EXPLORE_FORM_DATA_CACHE_CONFIG = {
    'CACHE_TYPE': 'RedisCache',
    'CACHE_DEFAULT_TIMEOUT': 86400,
    'CACHE_KEY_PREFIX': 'superset_explore_',
    'CACHE_REDIS_URL': 'redis://superset-1-redis-svc:6379/3'
    }

    DATA_CACHE_CONFIG = {
    'CACHE_TYPE': 'RedisCache',
    'CACHE_KEY_PREFIX': 'superset_results_',  
    'CACHE_DEFAULT_TIMEOUT': 86400,
    'CACHE_REDIS_URL': 'redis://superset-1-redis-svc:6379/4' 
    }
---
# Source: superset/templates/redis-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: superset-1-redis-config
  labels:
    app.kubernetes.io/name: "superset-1"
    app.kubernetes.io/component: superset-redis
data:
  # redis save interval configuration is composed from two parameters
  # 10 is the interval in seconds which will store the data in the disk
  # 2 is the number of keys changed until the data is persisted
  save-interval: "30 2"
  redis_ping_liveness_local.sh: |-
    response="$(
          timeout -s 9 1 \
          redis-cli \
            -a "${REDIS_PASSWORD}" --no-auth-warning \
            -h "${REDIS_ADDR}" \
            -p 6379 \
            ping
        )"
    if [[ "${response}" != "PONG" ]] && [[ "${response}" != "LOADING Redis is loading the dataset in memory" ]]; then
      echo "${response}"
      exit 1
    fi
  redis_ping_readiness_local.sh: |-
    response="$(
          timeout -s 9 1 \
          redis-cli \
            -a "${REDIS_PASSWORD}" --no-auth-warning \
            -h "${REDIS_ADDR}" \
            -p 6379 \
            ping
        )"
    if [[ "${response}" != "PONG" ]]; then
      echo "${response}"
      exit 1
    fi
---
# Source: superset/templates/postgresql-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: superset-1-postgresql-service
  labels:
    app.kubernetes.io/name: "superset-1"
    app.kubernetes.io/component: postgresql-service
spec:
  ports:
    - port: 5432
  selector:
    app.kubernetes.io/name: "superset-1"
    app.kubernetes.io/component: postgresql-server
---
# Source: superset/templates/postgresql-service.yaml
kind: Service
apiVersion: v1
metadata:
  name: superset-1-postgres-exporter-svc
  labels: &PostgresSQLLabels
    app.kubernetes.io/name: "superset-1"
    app.kubernetes.io/component: postgresql-server
spec:
  ports:
  - name: postgres-exporter
    port: 9187
  selector: *PostgresSQLLabels
  type: ClusterIP
---
# Source: superset/templates/redis-services.yaml
apiVersion: v1
kind: Service
metadata:
  name: superset-1-redis-svc
  labels:
    app.kubernetes.io/name: "superset-1"
    app.kubernetes.io/component: superset-redis
spec:
  ports:
  - name: redis
    port: 6379
  selector:
    app.kubernetes.io/name: "superset-1"
    app.kubernetes.io/component: superset-redis
  type: ClusterIP
---
# Source: superset/templates/redis-services.yaml
apiVersion: v1
kind: Service
metadata:
  name: superset-1-redis-exporter-svc
  labels:
    app.kubernetes.io/name: "superset-1"
    app.kubernetes.io/component: superset-redis
spec:
  ports:
  - name: mysql-exporter
    port: 9121
  selector:
    app.kubernetes.io/name: "superset-1"
    app.kubernetes.io/component: superset-redis
  type: ClusterIP
---
# Source: superset/templates/superset-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: superset-1-superset-svc
  labels:
    app.kubernetes.io/name: superset-1
    app.kubernetes.io/component: apache-superset
spec:
  ports:
  - name: http
    port: 8088
  selector:
    app.kubernetes.io/name: superset-1
    app.kubernetes.io/component: apache-superset
  
  type: LoadBalancer
---
# Source: superset/templates/postgresql-sts.yaml
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: superset-1-postgresql
  labels: &PostgreSQLLabels
    app.kubernetes.io/name: superset-1
    app.kubernetes.io/component: postgresql-server
spec:
  replicas: 1
  selector:
    matchLabels: *PostgreSQLLabels
  serviceName: superset-1-postgresql-service
  template:
    metadata:
      labels: *PostgreSQLLabels
    spec:
      serviceAccountName: superset-1-serviceaccount
      volumes:
      - name: tls-volume
        secret:
          secretName: superset-1-tls
      - name: superset-1-postgresql-pvc
        persistentVolumeClaim:
          claimName: superset-1-postgresql-pvc
      containers:
      - name: postgresql-server
        image: marketplace.gcr.io/google/postgresql13:latest
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 5432
          name: postgres
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
        volumeMounts:
        - name: superset-1-postgresql-pvc
          mountPath: /var/lib/postgresql/data
        - name: tls-volume
          mountPath: /var/lib/postgresql/data/tls
        env:
        - name: "PGDATA"
          value: "/var/lib/postgresql/data/pgdata"
        - name: "POSTGRES_PASSWORD"
          valueFrom:
            secretKeyRef:
              name: superset-1-postgresql-secret
              key: password
        - name: "POSTGRES_USER"
          value: superset
        - name: "POSTGRES_DB"
          value: superset
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
      - name: postgresql-exporter
        image: marketplace.gcr.io/google/postgresql-exporter0:latest
        imagePullPolicy: Always
        ports:
          - containerPort: 9187
            name: exporter
        env:
          - name: "DATA_SOURCE_URI"
            value: "localhost:5432/postgres?sslmode=disable"
          - name: "DATA_SOURCE_USER"
            value: "postgres"
          - name: "DATA_SOURCE_PASS"
            valueFrom:
              secretKeyRef:
                name: superset-1-postgresql-secret
                key: password
      
  volumeClaimTemplates:
  - metadata:
      name: superset-1-postgresql-pvc
      labels: *PostgreSQLLabels
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: 
      resources:
        requests:
          storage: 10Gi
---
# Source: superset/templates/redis-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: superset-1-redis
  labels: &RedisDeploymentLabels
    app.kubernetes.io/name: "superset-1"
    app.kubernetes.io/component: superset-redis
spec:
  replicas: 1
  selector:
    matchLabels: *RedisDeploymentLabels
  serviceName: superset-1-redis-svc
  template:
    metadata:
      labels: *RedisDeploymentLabels
    spec:
      containers:
      - image: marketplace.gcr.io/google/redis6:latest
        name: redis
        args:
        - "--requirepass"
        - "$(REDIS_PASSWORD)"
        - "--dir"
        - "/data"
        - "--appendonly"
        - "yes"
        - "--save"
        - "$(REDIS_SAVE_INTERVAL)"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: superset-1-redis-secret
              key: password
        - name: REDIS_SAVE_INTERVAL
          valueFrom:
            configMapKeyRef:
              name: superset-1-redis-config
              key: save-interval
        - name: REDIS_ADDR
          value: "localhost"
        ports:
        - name: redis
          containerPort: 6379
        volumeMounts:
        - name: superset-1-redis-data-pvc
          mountPath: /data
        - name: health
          mountPath: /health
        livenessProbe:
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - sh
            - -c
            - /health/redis_ping_liveness_local.sh 1
        readinessProbe:
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - sh
            - -c
            - /health/redis_ping_readiness_local.sh 1
      - image: marketplace.gcr.io/google/redis-exporter1:latest
        name: redis-exporter
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: superset-1-redis-secret
              key: password
        - name: REDIS_ADDR
          value: localhost
        - name: REDIS_EXPORTER_INCL_SYSTEM_METRICS
          value: "true"
        ports:
        - name: redis-exporter
          containerPort: 9121
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9121
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9121
          initialDelaySeconds: 60
          timeoutSeconds: 30
          failureThreshold: 10
          periodSeconds: 10
      volumes:
       - name: health
         configMap:
            name: superset-1-redis-config
            defaultMode: 0755
  volumeClaimTemplates:
  - metadata:
      name: superset-1-redis-data-pvc
      labels:
        app.kubernetes.io/name: "superset-1"
        app.kubernetes.io/component: superset-server
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: 
      resources:
        requests:
          storage: 5Gi
---
# Source: superset/templates/superset-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: superset-1-superset
  labels: &supersetDeploymentLabels
    app.kubernetes.io/name: "superset-1"
    app.kubernetes.io/component: apache-superset
spec:
  serviceName: superset-1-superset-svc
  selector:
    matchLabels: *supersetDeploymentLabels
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels: *supersetDeploymentLabels
    spec:
      initContainers:
      - name: check-db
        image: busybox:1.35
        imagePullPolicy: IfNotPresent
        command:
          - sh
          - -c
          - |
            echo 'Waiting for PostgreSQL to become ready...'
            until printf "." && nc -z -w 2 "superset-1-postgresql-service" 5432; do
            sleep 2;
            done;
            sleep 5;
            echo 'PostgreSQL is ready'  
      containers:
      - image: gcr.io/ccm-ops-test-adhoc/superset1:1.5
        name: superset
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:            
        # A superset's password.
        - name: SUPERSET_PASSWORD
          valueFrom:
            secretKeyRef:
              name: superset-1-superset-secret
              key: superset-password
        #- name: SUPERSET__SQLALCHEMY_DATABASE_URI
        # value: postgresql+psycopg2://superset:NHBldDQvcmtCM1do@superset-1-postgresql-service:5432/superset
        # A username used for accessing the database.
        - name: DATABASE_USER
          value: superset         
        # A password used for accessing the database.
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: superset-1-postgresql-secret
        # A database name used by Superset.
        - name: DATABASE_DB
          value: superset
        # A hostname of Postgresql service.
        - name: DATABASE_HOST
          value: superset-1-postgres-svc
        - name: PYTHONPATH
          value: "/etc/superset"  
        ports:
        - containerPort: 8088
          name: superset-port
        livenessProbe:
          httpGet:
            path: /health
            port: 8088
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8088
          initialDelaySeconds: 60
          periodSeconds: 30
          failureThreshold: 6
      
        volumeMounts:
           - name: config-volume
             mountPath: /etc/superset
      volumes:
        - name: config-volume
          configMap:
            name: superset-configmap
---
# Source: superset/templates/superset-service.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: superset-1-superset-ingress
  labels:
    app.kubernetes.io/name: "superset-1"
    app.kubernetes.io/component: apache-superset
spec:
  tls:
  - secretName: superset-1-tls
  defaultBackend:
    service:
      name: superset-1-superset-svc
      port:
        name: http
