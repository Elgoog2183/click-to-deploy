apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: $APP_INSTANCE_NAME-cert-configmap
  labels:
    app.kubernetes.io/name: $APP_INSTANCE_NAME
    app.kubernetes.io/component: cert-configmap
data:
  cert.sh: |-
    set -euxo pipefail

    service="$APP_INSTANCE_NAME-flink-operator-webhook"
    secret="$APP_INSTANCE_NAME-webhook-cert"
    namespace="$NAMESPACE"
    csrName="${service}.${namespace}"
    tmpdir="$(mktemp -d)"
    echo "Creating certs in tmpdir ${tmpdir} "
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ca.key -out ca.crt -subj "/CN=Admission Controller Webhook CA"
    openssl genrsa -out ${tmpdir}/server-key.pem 2048
    openssl req -new -key ${tmpdir}/server-key.pem -subj "/CN=${service}.${namespace}.svc" -addext "subjectAltName=DNS:${service}.${namespace}.svc" -out ${tmpdir}/server-key.csr
    openssl x509 -req -extfile <(printf "subjectAltName=DNS:${service}.${namespace}.svc") -CA ca.crt -CAkey ca.key -CAcreateserial -in ${tmpdir}/server-key.csr -out ${tmpdir}/server-cert.pem
    openssl x509 -in ${tmpdir}/server-cert.pem -text -noout
    serverCert="$(openssl base64 -A -in ${tmpdir}/server-cert.pem)"
    if [[ -z ${serverCert} ]]; then
        echo "ERROR: The signed certificate did not appear." >&2
        exit 1
    fi
    export CA_PEM_B64="$(echo ${serverCert})"

    # create the secret with CA cert and server cert/key
    kubectl create secret generic ${secret} \
            --from-file=tls.key=${tmpdir}/server-key.pem \
            --from-file=tls.crt=${tmpdir}/server-cert.pem \
            --dry-run -o yaml |
        kubectl -n ${namespace} apply -f -

    for webhook in /webhook_to_create/*;
    do
      echo $(cat $webhook | envsubst '${CA_PEM_B64}');
      cat $webhook | envsubst '${CA_PEM_B64}' | kubectl apply -f -
    done
    sleep 7200s
